#if !defined(_ThesaurusDao_)
#define _ThesaurusDao_

#include "DataStore.h"
#include "RelatedWord.h"
#include "Word.h"

// This code was generated by a tool. Don't modify it manually.
// http://sqldalmaker.sourceforge.net

class ThesaurusDao {
protected:

    CDataStore &m_ds;

public:

    ThesaurusDao(CDataStore &ds) : m_ds(ds) {
    }
	
    /* 
       Returns the number of fetched rows or -1 on error.
     */
    int getTotalWordsCount(CValue &res) {
        DL_STR sql = DL_T("select count(*) from WORDS");
        CValue *res_values[] = {&res};
        DL_STR col_names[] = {DL_T("count(*)")};
        return m_ds.queryRow(sql, 0, 0, 1, res_values, col_names);
    }
	
    /* 
       Returns the number of fetched rows or -1 on error.
     */
    int getWordsByKey(CText &key, CListReader<Word> &reader) {
        DL_STR sql = DL_T("select * from WORDS \n\
where UPPER(w_word) like UPPER(?) \n\
order by w_word");
        struct : public CRowProcessor {
            Word buff;
            CListReader<Word> *pReader;
            void processRow() { pReader->read(buff); }
        } rp;
        rp.pReader = &reader;
        CValue *params[] = {&key};
        CValue *res_values[] = {&rp.buff.W_ID, &rp.buff.W_WORD};
        DL_STR col_names[] = {DL_T("W_ID"), DL_T("W_WORD")};
        return m_ds.queryRowList(sql, 1, params, 2, res_values, col_names, &rp);
    }
	
    /* 
       Returns the number of fetched rows or -1 on error.
     */
    int getRelatedWords(CValue &w_id, CListReader<RelatedWord> &reader) {
        DL_STR sql = DL_T("select  \n\
rg_part_of_speech, \n\
rg_order, \n\
rgw.* from RELATED_GROUPS rg inner join RELATED_GROUP_WORDS rgw on rg.rg_id = rgw.rg_id \n\
where rg.w_id = ? \n\
order by rg_id, rg.rg_order, rgw.rgw_order");
        struct : public CRowProcessor {
            RelatedWord buff;
            CListReader<RelatedWord> *pReader;
            void processRow() { pReader->read(buff); }
        } rp;
        rp.pReader = &reader;
        CValue *params[] = {&w_id};
        CValue *res_values[] = {&rp.buff.RG_PART_OF_SPEECH, &rp.buff.RG_ORDER, &rp.buff.RGW_ID, &rp.buff.RG_ID, &rp.buff.RGW_WORD, &rp.buff.RGW_NOTE, &rp.buff.RGW_ORDER};
        DL_STR col_names[] = {DL_T("RG_PART_OF_SPEECH"), DL_T("RG_ORDER"), DL_T("RGW_ID"), DL_T("RG_ID"), DL_T("RGW_WORD"), DL_T("RGW_NOTE"), DL_T("RGW_ORDER")};
        return m_ds.queryRowList(sql, 1, params, 7, res_values, col_names, &rp);
    }
};

#endif // !defined(_ThesaurusDao_)